//5.2 
cd $GOPATH/src
mkdir stream-music && cd stream-music
mkdir basic-network && cd basic-network
mkdir crypto-config
touch crypto-config.yaml
touch configtx.yaml
touch docker-compose.yaml
export FABRIC_CFG_PATH=$PWD
cp -r $GOPATH/src/fabric-samples/bin ./

//5.2.1
cd $GOPATH/src/stream-music/basic-network
code crypto-config.yaml
--------------
OrdererOrgs:
  - Name: Orderer
    Domain: acornpub.com
    Specs:
      - Hostname: orderer

PeerOrgs:
  - Name: Sales1
    Domain: sales1.acornpub.com
    Template:
      Count: 2
    Users:
      Count: 1
  - Name: Customer
    Domain: customer.acornpub.com
    Template:
      Count: 2
    Users:
      Count: 1
---------------------
./bin/cryptogen generate --config=./crypto-config.yaml

//5.2.2
cd $GOPATH/src/stream-music/basic-network
code configtx.yaml
-----------------
Organizations:

    - &OrdererOrg
        Name: OrdererOrg
        ID: OrdererOrg
        MSPDir: crypto-config/ordererOrganizations/acornpub.com/msp

    - &Sales1Org
        Name: Sales1Org
        ID: Sales1Org
        MSPDir: crypto-config/peerOrganizations/sales1.acornpub.com/msp
        AnchorPeers:
            - Host: peer0.sales1.acornpub.com
              Port: 7051

    - &CustomerOrg
        Name: CustomerOrg
        ID: CustomerOrg
        MSPDir: crypto-config/peerOrganizations/customer.acornpub.com/msp
        AnchorPeers:
            - Host: peer0.customer.acornpub.com
              Port: 7051

Orderer: &OrdererDefaults

    OrdererType: solo
    Addresses:
        - orderer.acornpub.com:7050
    BatchTimeout: 2s
    BatchSize:
        MaxMessageCount: 10
        AbsoluteMaxBytes: 99 MB
        PreferredMaxBytes: 512 KB
    Kafka:
        Brokers:
            - 127.0.0.1:9092
    Organizations:

Application: &ApplicationDefaults
    Organizations:
    
Profiles:

    OrdererGenesis:
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *OrdererOrg
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *Sales1Org
                    - *CustomerOrg
    Channel1:
        Consortium: SampleConsortium
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Sales1Org
                - *CustomerOrg

----------------------
mkdir config
./bin/configtxgen -profile OrdererGenesis -outputBlock ./config/genesis.block

./bin/configtxgen -profile Channel1 -outputCreateChannelTx ./config/channel1.tx -channelID channelsales1

./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/Sales1Organchors.tx -channelID channelsales1 -asOrg Sales1Org

./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/CustomerOrganchors.tx -channelID channelsales1 -asOrg CustomerOrg

cd $GOPATH/src/stream-music/basic-network
code docker-compose.yaml
*************************************
*************************************
version: '2'

networks:
  acorn:

services:
  orderer.acornpub.com:
    container_name: orderer.acornpub.com
    image: hyperledger/fabric-orderer:1.4.3
    environment:
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererOrg
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/msp/orderer/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 7050:7050
    volumes:
        - ./config/:/etc/hyperledger/configtx
        - ./crypto-config/ordererOrganizations/acornpub.com/orderers/orderer.acornpub.com/:/etc/hyperledger/msp/orderer
    networks:
      - acorn
  peer0.sales1.acornpub.com:
    container_name: peer0.sales1.acornpub.com
    image: hyperledger/fabric-peer:1.4.3
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.sales1.acornpub.com
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=Sales1Org
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.sales1.acornpub.com:7051
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.sales1.acornpub.com:7051
      - CORE_PEER_GOSSIP_ENDPOINT=peer0.sales1.acornpub.com:7051
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.sales1.acornpub.com:7051
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_acorn
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 7051:7051
      - 7053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/sales1.acornpub.com/peers/peer0.sales1.acornpub.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/sales1.acornpub.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:
      - orderer.acornpub.com
    networks:
      - acorn
  peer1.sales1.acornpub.com:
    container_name: peer1.sales1.acornpub.com
    image: hyperledger/fabric-peer:1.4.3
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.sales1.acornpub.com
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=Sales1Org
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer1.sales1.acornpub.com:7051
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_acorn
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 8051:7051
      - 8053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/sales1.acornpub.com/peers/peer1.sales1.acornpub.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/sales1.acornpub.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:
      - orderer.acornpub.com
    networks:
      - acorn
  peer0.customer.acornpub.com:
    container_name: peer0.customer.acornpub.com
    image: hyperledger/fabric-peer:1.4.3
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer0.customer.acornpub.com
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=CustomerOrg
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer0.customer.acornpub.com:7051
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_acorn
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 9051:7051
      - 9053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/customer.acornpub.com/peers/peer0.customer.acornpub.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/customer.acornpub.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:
      - orderer.acornpub.com
    networks:
      - acorn
  peer1.customer.acornpub.com:
    container_name: peer1.customer.acornpub.com
    image: hyperledger/fabric-peer:1.4.3
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=peer1.customer.acornpub.com
      - CORE_LOGGING_PEER=debug
      - CORE_CHAINCODE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_LOCALMSPID=CustomerOrg
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/msp/peer/
      - CORE_PEER_ADDRESS=peer1.customer.acornpub.com:7051
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=net_acorn
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start
    ports:
      - 10051:7051
      - 10053:7053
    volumes:
        - /var/run/:/host/var/run/
        - ./crypto-config/peerOrganizations/customer.acornpub.com/peers/peer1.customer.acornpub.com/msp:/etc/hyperledger/msp/peer
        - ./crypto-config/peerOrganizations/customer.acornpub.com/users:/etc/hyperledger/msp/users
        - ./config:/etc/hyperledger/configtx
    depends_on:
      - orderer.acornpub.com
    networks:
      - acorn
  cli:
    container_name: cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=INFO
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=peer0.sales1.acornpub.com:7051
      - CORE_PEER_LOCALMSPID=Sales1Org
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/sales1.acornpub.com/users/Admin@sales1.acornpub.com/msp
      - CORE_CHAINCODE_KEEPALIVE=10
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./../chaincode/:/opt/gopath/src/chaincode/
        - ./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ./config:/etc/hyperledger/configtx
    networks:
        - acorn

====================================

-------------------

cd $GOPATH/src/stream-music/basic-network
touch .envcode .env && code net
--------------
COMPOSE_PROJECT_NAME=net
-----------------
docker-compose -f docker-compose.yaml -p net up -d  orderer.acornpub.com peer0.sales1.acornpub.com peer1.sales1.acornpub.com peer0.customer.acornpub.com peer1.customer.acornpub.com cli

===================
//terminal 1
docker exec -it cli bash

#peer channel create -o orderer.acornpub.com:7050 -c channelsales1 -f /etc/hyperledger/configtx/channel1.tx

#peer channel join -b channelsales1.block

#peer channel update -o orderer.acornpub.com:7050 -c channelsales1 -f /etc/hyperledger/configtx/Sales1Organchors.tx

#CORE_PEER_ADDRESS=peer1.sales1.acornpub.com:7051

#peer channel join -b channelsales1.block

=======================
//terminal 2 - need to open a new terminal
cd $GOPATH/src/stream-music/basic-network

docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer0.customer.acornpub.com:7051" -it cli bash

#peer channel join -b channelsales1.block

#peer channel update -o orderer.acornpub.com:7050 -c channelsales1 -f /etc/hyperledger/configtx/CustomerOrganchors.tx

#CORE_PEER_ADDRESS=peer1.customer.acornpub.com:7051

#peer channel join -b channelsales1.block

================================

//5.3 Chain code building

cd $GOPATH/src/stream-music

sudo chown $USER:$USER chaincode

cd chaincode

mkdir go && cd go

touch music.go && code music.go

---------------------------
music.go
---------------------------
package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"strconv"
	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)

type SmartContract struct {}

type Wallet struct {
	Name string `json:"name"`
	ID   string `json:"id"`
	Token string `json:"token"`
}

type Music struct {
	Title    string `json:"title"`
	Singer   string `json:"singer"`
	Price    string `json:"price"`
	WalletID    string `json:"walletid"`
}

type MusicKey struct {
	Key string
	Idx int
}

func (s *SmartContract) Init(APIstub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}

func (s *SmartContract) Invoke(APIstub shim.ChaincodeStubInterface) pb.Response {
	function, args := APIstub.GetFunctionAndParameters()
	
	if function == "initWallet" {
		return s.initWallet(APIstub)
	} else if function == "getWallet" {
		return s.getWallet(APIstub, args)
	} else if function == "setMusic" {
		return s.setMusic(APIstub, args)
	} else if function == "getAllMusic" {
		return s.getAllMusic(APIstub)
	} else if function == "purchaseMusic" {
		return s.purchaseMusic(APIstub, args)
	}
	fmt.Println("Please check your function : " + function)
	return shim.Error("Unknown function")
}

func (s *SmartContract) initWallet(APIstub shim.ChaincodeStubInterface) pb.Response {

	//Declare wallets
	seller := Wallet{Name: "Hyper", ID: "1Q2W3E4R", Token: "100"}
	customer := Wallet{Name: "Ledger", ID: "5T6Y7U8I", Token: "200"}

	// Convert seller to []byte
	SellerasJSONBytes, _ := json.Marshal(seller)
	err := APIstub.PutState(seller.ID, SellerasJSONBytes)
	if err != nil {
		return shim.Error("Failed to create asset " + seller.Name)
	}
	// Convert customer to []byte
	CustomerasJSONBytes, _ := json.Marshal(customer)
	err = APIstub.PutState(customer.ID, CustomerasJSONBytes)
	if err != nil {
		return shim.Error("Failed to create asset " + customer.Name)
	}

	return shim.Success(nil)
}

func (s *SmartContract) getWallet(APIstub shim.ChaincodeStubInterface, args []string) pb.Response {

	walletAsBytes, err := APIstub.GetState(args[0])
	if err != nil {
		fmt.Println(err.Error())
	}

	wallet := Wallet{}
	json.Unmarshal(walletAsBytes, &wallet)

	var buffer bytes.Buffer
	buffer.WriteString("[")
	bArrayMemberAlreadyWritten := false

	if bArrayMemberAlreadyWritten == true {
		buffer.WriteString(",")
	}
	buffer.WriteString("{\"Name\":")
	buffer.WriteString("\"")
	buffer.WriteString(wallet.Name)
	buffer.WriteString("\"")

	buffer.WriteString(", \"ID\":")
	buffer.WriteString("\"")
	buffer.WriteString(wallet.ID)
	buffer.WriteString("\"")

	buffer.WriteString(", \"Token\":")
	buffer.WriteString("\"")
	buffer.WriteString(wallet.Token)
	buffer.WriteString("\"")

	buffer.WriteString("}")
	bArrayMemberAlreadyWritten = true
	buffer.WriteString("]\n")

	return shim.Success(buffer.Bytes())

}

func generateKey(APIstub shim.ChaincodeStubInterface, key string) []byte {

	var isFirst bool = false

	musickeyAsBytes, err := APIstub.GetState(key)
	if err != nil {
		fmt.Println(err.Error())
	}

	musickey := MusicKey{}
	json.Unmarshal(musickeyAsBytes, &musickey)
	var tempIdx string
	tempIdx = strconv.Itoa(musickey.Idx)
	fmt.Println(musickey)
	fmt.Println("Key is " + strconv.Itoa(len(musickey.Key)))
	if len(musickey.Key) == 0 || musickey.Key == "" {
		isFirst = true
		musickey.Key = "MS"
	}
	if !isFirst {
		musickey.Idx = musickey.Idx + 1
	}

	fmt.Println("Last MusicKey is " + musickey.Key + " : " + tempIdx)

	returnValueBytes, _ := json.Marshal(musickey)

	return returnValueBytes
}

func (s *SmartContract) setMusic(APIstub shim.ChaincodeStubInterface, args []string) pb.Response {
	if len(args) != 4 {
		return shim.Error("Incorrect number of arguments. Expecting 4")
	}
	
	var musickey = MusicKey{}
	json.Unmarshal(generateKey(APIstub, "latestKey"), &musickey)
	keyidx := strconv.Itoa(musickey.Idx)
	fmt.Println("Key : " + musickey.Key + ", Idx : " + keyidx)

	var music = Music{Title: args[0], Singer: args[1], Price: args[2], WalletID: args[3]}
	musicAsJSONBytes, _ := json.Marshal(music)

	var keyString = musickey.Key + keyidx
	fmt.Println("musickey is " + keyString)

	err := APIstub.PutState(keyString, musicAsJSONBytes)
	if err != nil {
		return shim.Error(fmt.Sprintf("Failed to record music catch: %s", musickey))
	}

	musickeyAsBytes, _ := json.Marshal(musickey)
	APIstub.PutState("latestKey", musickeyAsBytes)

	return shim.Success(nil)
}

func (s *SmartContract) getAllMusic(APIstub shim.ChaincodeStubInterface) pb.Response {
	
	// Find latestKey
	musickeyAsBytes, _ := APIstub.GetState("latestKey")
	musickey := MusicKey{}
	json.Unmarshal(musickeyAsBytes, &musickey)
	idxStr := strconv.Itoa(musickey.Idx + 1)

	var startKey = "MS0"
	var endKey = musickey.Key + idxStr
	fmt.Println(startKey)
	fmt.Println(endKey)

	resultsIter, err := APIstub.GetStateByRange(startKey, endKey)
	if err != nil {
		return shim.Error(err.Error())
	}
	defer resultsIter.Close()
	
	var buffer bytes.Buffer
	buffer.WriteString("[")
	bArrayMemberAlreadyWritten := false
	for resultsIter.HasNext() {
		queryResponse, err := resultsIter.Next()
		if err != nil {
			return shim.Error(err.Error())
		}
		
		if bArrayMemberAlreadyWritten == true {
			buffer.WriteString(",")
		}
		buffer.WriteString("{\"Key\":")
		buffer.WriteString("\"")
		buffer.WriteString(queryResponse.Key)
		buffer.WriteString("\"")
		
		buffer.WriteString(", \"Record\":")
		
		buffer.WriteString(string(queryResponse.Value))
		buffer.WriteString("}")
		bArrayMemberAlreadyWritten = true
	}
	buffer.WriteString("]\n")
	return shim.Success(buffer.Bytes())
}

func (s *SmartContract) purchaseMusic(APIstub shim.ChaincodeStubInterface, args []string) pb.Response {
	var tokenFromKey, tokenToKey int // Asset holdings
	var musicprice int // Transaction value
	var err error

	if len(args) != 2 {
		return shim.Error("Incorrect number of arguments. Expecting 2")
	}

	musicAsBytes, err := APIstub.GetState(args[1])
	if err != nil {
		return shim.Error(err.Error())
	}

	music := Music{}
	json.Unmarshal(musicAsBytes, &music)
	musicprice, _ = strconv.Atoi(music.Price)

	SellerAsBytes, err := APIstub.GetState(music.WalletID)
	if err != nil {
		return shim.Error("Failed to get state")
	}
	if SellerAsBytes == nil {
		return shim.Error("Entity not found")
	}
	seller := Wallet{}
	json.Unmarshal(SellerAsBytes, &seller)
	tokenToKey, _ = strconv.Atoi(seller.Token)

	CustomerAsBytes, err := APIstub.GetState(args[0])
	if err != nil {
		return shim.Error("Failed to get state")
	}
	if CustomerAsBytes == nil {
		return shim.Error("Entity not found")
	}

	customer := Wallet{}
	json.Unmarshal(CustomerAsBytes, &customer)
	tokenFromKey, _ = strconv.Atoi(string(customer.Token))

	customer.Token = strconv.Itoa(tokenFromKey - musicprice)
	seller.Token = strconv.Itoa(tokenToKey + musicprice)
	updatedCustomerAsBytes, _ := json.Marshal(customer)
	updatedSellerAsBytes, _ := json.Marshal(seller)
	APIstub.PutState(args[0], updatedCustomerAsBytes)
	APIstub.PutState(music.WalletID, updatedSellerAsBytes)

	// buffer is a JSON array containing QueryResults
	var buffer bytes.Buffer
	buffer.WriteString("[")

	buffer.WriteString("{\"Customer Token\":")
	buffer.WriteString("\"")
	buffer.WriteString(customer.Token)
	buffer.WriteString("\"")

	buffer.WriteString(", \"Seller Token\":")
	buffer.WriteString("\"")
	buffer.WriteString(seller.Token)
	buffer.WriteString("\"")

	buffer.WriteString("}")
	buffer.WriteString("]\n")

	return shim.Success(buffer.Bytes())
}

func main() {

	err := shim.Start(new(SmartContract))
	if err != nil {
		fmt.Printf("Error starting Simple chaincode: %s", err)
	}
}
-----------------------------------------------------
mkdir -p $GOPATH/src/github.com/hyperledger

cd $GOPATH/src/github.com/hyperledger

git clone -b release-1.4 https://github.com/hyperledger/fabric.git

cd ~/go/src/stream-music/chaincode/go

go get -u github.com/hyperledger/fabric/core/chaincode/shim
----------------------
cd $GOPATH/src/stream-music/basic-network

docker stop cli && docker rm cli

docker-compose -p net up -d cli


docker exec -it cli bash


peer chaincode install -l golang -n music-cc -v 1.0 -p chaincode/go
 
peer chaincode instantiate -o orderer.acornpub.com:7050 -C channelsales1 -n music-cc -v 1.0 -c '{"Args":[""]}' -P "OR ('Sales1Org.member')"
 

peer chaincode invoke -o orderer.acornpub.com:7050 -C channelsales1 -n music-cc -c '{"function":"initWallet", "Args":[""]}'

peer chaincode invoke -o orderer.acornpub.com:7050 -C channelsales1 -n music-cc -c '{"function":"setMusic", "Args":["Fabric","Hyper","20","1Q2W3E4R"]}'

peer chaincode invoke -o orderer.acornpub.com:7050 -C channelsales1 -n music-cc -c '{"function":"purchaseMusic", "Args":["5T6Y7U8I","MS0"]}'

peer chaincode query -o orderer.acornpub.com:7050 -C channelsales1 -n music-cc -c '{"function":"getWallet", "Args":["1Q2W3E4R"]}'

peer chaincode query -o orderer.acornpub.com:7050 -C channelsales1 -n music-cc -c '{"function":"getWallet", "Args":["5T6Y7U8I"]}'
====================================
************************************
------------------설치메뉴얼
====================================
 

1. Virtual Box 가상머신 만들기

- 메모리 4GB, 하드디스크 50GB

- 지금 새 가상 하드디스크 만들기

- VDI(VirtualBox 디스크 이미지)

- 고정크기

 

2. 우분투 설치: 18.04.X LTS

3. cURL 설치

sudo apt install curl

curl -V

 

4. 도커 설치

curl -fsSL https://get.docker.com/ | sudo sh

 

도커는 기본적으로 root권한 필요

리눅스 시스템의 현재 사용자를 도커 그룹에 추가해 관리자 이외의 권한으로도 도커 서버/클라이언트 수행할 수 있도록 변경

sudo usermod -aG docker $USER

sudo reboot

docker -v

 

도커컴포즈 설치

sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

sudo chmod +x /usr/local/bin/docker-compose

docker-compose

 

5. GOLANG 설치

cd /usr/local

sudo wget https://storage.googleapis.com/golang/go1.11.1.linux-amd64.tar.gz

sudo tar -C /usr/local -xzf go1.11.1.linux-amd64.tar.gz

 

환경변수 설정

echo 'export PATH=$PATH:/usr/local/go/bin' | sudo tee -a /etc/profile && \

echo 'export GOPATH=$HOME/go' | tee -a $HOME/.bashrc && \


 
echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' | tee -a $HOME/.bashrc && \

mkdir -p $HOME/go/{src,pkg,bin}

sudo reboot

go version

 

6. git 설치

sudo apt install -y git

git --version

 

7. 파이썬 설치

sudo apt install -y python

python --version

 

8. Node.js, npm 설치

curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash

sudo reboot

nvm install 8

nvm use 8

npm install npm@5.6.0 -g

node -v

npm -v

 

9. VSCode 설치: 홈페이지

10. JAVA, JDK 설치

sudo add-apt-repository ppa:openjdk-r/ppa

sudo apt update

sudo apt install openjdk-8-jdk openjdk-8-jre

javac -version

java -version

 

11. Gradle 설치

sudo apt install gradle

 

12. IntelliJ 설치: 홈페이지에서 받아 압축 해제

 

13. 하이퍼레저 패브릭 설치

cd $GOPATH/src

curl -sSL http://bit.ly/2ysbOFE | bash -s -- 1.4.3 1.4.3 0.4.15

 

하이퍼레저 패브릭 동작확인

cd $GOPATH/src/fabric-samples/first-network

./byfn.sh -h

./byfn.sh generate

./byfn.sh up

./byfn.sh down

 

하이퍼레저 컴포저 개발환경 구성

curl -O https://hyperledger.github.io/composer/latest/prereqs-ubuntu.sh

chmod u+x prereqs-ubuntu.sh

./prereqs-ubuntu.sh

 

하이퍼레저 컴포저 설치

npm install -g composer-cli@0.20

npm install -g composer-rest-server@0.20

npm install -g generator-hyperledger-composer@0.20

npm install -g yo

npm install -g composer-playground

composer-playground

------------------------

 

 

하이퍼레저 패브릭 애플리케이션 개발 관련 내용

cd $GOPATH/src

mkdir stream-music && cd stream-music

mkdir basic-network && cd basic-network

mkdir crypto-config

touch crypto-config.yaml

touch configtx.yaml

touch docker-compose.yaml

export FABRIC_CFG_PATH=$PWD

cp -r $GOPATH/src/fabric-samples/bin ./

cd $GOPATH/src/stream-music/basic-network

code crypto-config.yaml

 

./bin/cryptogen generate --config=./crypto-config.yaml

 

cd $GOPATH/src/stream-music/basic-network

code configtx.yaml

 

mkdir config

./bin/configtxgen -profile OrdererGenesis -outputBlock ./config/genesis.block

./bin/configtxgen -profile Channel1 - outputCreateChannelTx ./config/channel1.tx -channelID channelsales1


 
./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/Sales1Organchors.tx -channelID channelsales1 -asOrg Sales1Org


 
./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/CustomerOrganchors.tx -channelID channelsales1 -asOrg CustomerOrg

 

 
===============================================================
도커 컨테이너 내리기

docker stop $(docker ps -a -q)

docker rm $(docker ps -a -q)

docker imasges | grep 'func-cc'

docker volume prune

=============================================================== 

docker rm $(docker ps -aqf name=/orderer.acornpub.com)

docker rm $(docker ps -aqf name=/peer0.sales1.acornpub.com)

docker rm $(docker ps -aqf name=/peer1.sales1.acornpub.com)

docker rm $(docker ps -aqf name=/peer0.customer.acornpub.com)

docker rm $(docker ps -aqf name=/peer1.customer.acornpub.com)

docker rm $(docker ps -aqf name=/cli)

 



출처: https://cerulean85.tistory.com/402?category=772283 [아이디어 저장소]

PANI 003 Error reading configuration: Unsupported Config Type "" 오류

- /go/src/fabric-samples/stream-music-2/basic-network를 FABRIC_CFG_PATH로.



export FABRIC_CFG_PATH=$PWD



$ ./bin/cryptogen generate --config=./crypto-config.yaml

$ ./bin/configtxgen -profile OrdererGenesis -outputBlock ./config/genesis.block


 
$ ./bin/configtxgen -profile Channel1 -outputCreateChannelTx ./config/channel1.tx


 
$ ./bin/configtxgen -profile Channel2 -outputCreateChannelTx ./config/channel2.tx

$ ./bin/configtxgen -profile Channel1 -outputCreateChannelTx ./config/channel1.tx -channelID

$ ./bin/configtxgen -profile Channel2 -outputCreateChannelTx ./config/channel2.tx

$ ./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/Sales1Organchors.tx -channelID channelsales1 -asOrg Sales1Org

$ ./bin/configtxgen -profile Channel2 -outputAnchorPeersUpdate ./config/Sales2Organchors.tx -channelID channelsales2 -asOrg Sales2Org

$ ./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/CustomerOrganchorsChannel1.tx -channelID channelsales1 -asOrg CustomerOrg

$ ./bin/configtxgen -profile Channel2 -outputAnchorPeersUpdate ./config/CustomerOrganchorsChannel2.tx -channelID channelsales2 -asOrg CustomerOrg

 

 

./bin/cryptogen generate --config=./crypto-config.yaml

mkdir config

./bin/configtxgen -profile OrdererGenesis -outputBlock ./config/genesis.block

./bin/configtxgen -profile Channel1 -outputCreateChannelTx ./config/channel1.tx -channelID channel1

./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/IndividualOrganchors.tx -channelID channel1 -asOrg IndividualOrg

./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/EnterpriselOrganchors.tx -channelID channel1 -asOrg EnterpriseOrg

./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/VerifierOrganchors.tx -channelID channel1 -asOrg VerifierOrg

 

 

 

도커컴포즈 실행

docker-compose -f docker-compose.yaml up -d orderer.recruit.net peer0.individual.recruit.net peer0.enterprise.recruit.net peer0.verifier.recruit.net cli

 

Individual 조직 peer0 노드 CLI 실행

docker exec -it cli bash

 

 

EnterpriseOrg 조직 peer0 노드 CLI 실행

docker exec -e "CORE_PEER_LOCALMSPID=EnterpriseOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/hyperledger/fabric/peer/crypto/peerOrganizations/enterprise.recruit.net/users/Admin@enterprise.recruit.net/msp" -e "CORE_PEER_ADDRESS=peer0.enterprise.recruit.net:7051" -it cli bash

 

 

VerifierOrg 조직 peer0 노드 CLI 실행

docker exec -e "CORE_PEER_LOCALMSPID=VerifierOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/hyperledger/fabric/peer/crypto/peerOrganizations/verifier.recruit.net/users/Admin@verifier.recruit.net/msp" -e "CORE_PEER_ADDRESS=peer0.verifier.recruit.net:7051" -it cli bash

 

 

채널 생성 및 Individual 조직의 peer0 노드를 channel1 채널에 가입 및 앵커 피어 지정 업데이트


 
peer channel create -o orderer.recruit.net:7050 -c channel1 -f /etc/hyperledger/configtx/channel1.tx &&

peer channel join -b channel1.block &&

peer channel update -o orderer.recruit.net:7050 -c channel1 -f /etc/hyperledger/configtx/IndividualOrganchors.tx

 

EnterpriseOrg 조직 peer0 노드를 channel1 채널에 가입 및 앵커 피어 지정 업데이트

peer channel join -b channel1.block

peer channel update -o orderer.recruit.net:7050 -c channel1 -f /etc/hyperledger/configtx/EnterpriseOrganchors.tx

 

VerifierOrg 조직 peer0 노드를 channel1 채널에 가입 및 앵커 피어 지정 업데이트

peer channel join -b channel1.block

peer channel update -o orderer.recruit.net:7050 -c channel1 -f /etc/hyperledger/configtx/VerifierOrganchors.tx

 

 

Chaincode 설치 및 인스턴스화

peer chaincode install -n func-cc -v 1.0 -p hyperledger/fabric/peer/chaincode/go &&

peer chaincode instantiate -o orderer.recruit.net:7050 -C channel1 -n func-cc -v 1.0 -c '{"Args":[""]}' -P "OR ('IndividualOrg.member')"

peer chaincode upgrade -o orderer.recruit.net:7050 -C channel1 -n func-cc -v 1.1 -c '{"Args":[""]}' -P "OR ('IndividualOrg.member')"

 

Batch

채널 생성 및 Individual 조직의 peer0 노드를 channel1 채널에 가입 및 앵커 피어 지정 업데이트

Chaincode 설치 및 인스턴스화

peer channel create -o orderer.recruit.net:7050 -c channel1 -f /etc/hyperledger/configtx/channel1.tx &&

peer channel join -b channel1.block &&

peer channel update -o orderer.recruit.net:7050 -c channel1 -f /etc/hyperledger/configtx/IndividualOrganchors.tx &&

peer chaincode install -n func-cc -v 1.0 -p hyperledger/fabric/peer/chaincode/go &&

peer chaincode instantiate -o orderer.recruit.net:7050 -C channel1 -n func-cc -v 1.0 -c '{"Args":[""]}' -P "OR ('IndividualOrg.member')" &&

peer chaincode invoke -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"initWallet", "Args":[""]}'

 

 

설치된 Chaincode 목록조회

peer chaincode list --installed

 

Chaincode 수정하기

1. 소스코드 수정

2. 버전 변경하여 다시 설치

peer chaincode install -n func-cc -v 2.0 -p hyperledger/fabric/peer/chaincode/go

 

3. 변경된 버전 설치

peer chaincode upgrade -o orderer.recruit.net:7050 -C channel1 -n func-cc -v 1.1 -c '{"Args":[""]}' -P "OR ('IndividualOrg.member')"

 

 

 

Chaincode 수정했지만 반영이 안 될 때

Chaincode 도커 이미지 제거

docker image list

docker image rm -f 3baa6abf8ac8

 

 

체인코드 등록 후 테스트 순서

Wallet 초기화

peer chaincode invoke -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"initWallet", "Args":[""]}'

 

Wallet 설정

peer chaincode invoke -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"setWallet", "Args":["INDIVIDUAL", "indv"]}'

 

2. Wallet 호출

peer chaincode query -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"getWallet", "Args":["indv"]}'

 

3. Resume 생성

peer chaincode invoke -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"setResume", "Args":["My First Resume", "JHKim", "32", "indv"]}'

 

4. Resume 호출

peer chaincode query -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"getResume", "Args":["MS0"]}'

 

peer chaincode invoke -o orderer.recruit.net:7050 -C channel1 -n func-cc -c '{"function":"updateResumeTitle", "Args":["Modified Title!!!!"]}'

 

 

API error (404): network ...not found 에러

COMPOSE_PROJECT_NAME가 설정되지 않았으므로, docker-compose.yaml 파일이 위치하는 곳에 .env 파일을 만들어 아래처럼 작성

COMPOSE_PROJECT_NAME=net

 

npm init

package.json 작성

npm install --save

 

*** connection.json의 adminPrivateKey는 docker-compose-ca.yaml에 적는 그 값과는 다른 값임

 

 

테스트 주소

http://218.150.182.180:8080/api/getWallet?walletid=1Q2W3E4R

http://218.150.182.180:8080/api/getWallet?walletid=5T6Y7U8I

http://218.150.182.180:8080/api/getAllResume

http://218.150.182.180:8080/api/purchaseResume?walletid=5T6Y7U8I&resumekey=MS0

 

 

하이퍼레저 패브릭 실전 프로젝트 소스코드

https://github.com/hyblekorea/hyperledger-fabric-stream-music/blob/master/stream-music/application/rest/server.js

 
출처: https://cerulean85.tistory.com/402?category=772283 [아이디어 저장소]

