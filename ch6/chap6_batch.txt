================= generate.sh ==================
#!/bin/sh

rm -rf $GOPATH/src/github.com/hyperledger-fabric-stream-music/stream-music-2/application/wallet/*
cd $GOPATH/src/github.com/hyperledger-fabric-stream-music/stream-music-2/basic-network

export PATH=$GOPATH/src/github.com/hyperledger/fabric/build/bin:${PWD}/../bin:${PWD}:$PATH
export FABRIC_CFG_PATH=${PWD}
CHANNEL_NAME1=channelsales1
CHANNEL_NAME2=channelsales2

# remove previous crypto material and config transactions
rm -fr config/*
rm -fr crypto-config/*

# generate crypto material
./bin/cryptogen generate --config=./crypto-config.yaml
if [ "$?" -ne 0 ]; then
  echo "Failed to generate crypto material..."
  exit 1
fi

# generate genesis block for orderer

./bin/configtxgen -profile OrdererGenesis -outputBlock ./config/genesis.block 
if [ "$?" -ne 0 ]; then
  echo "Failed to generate orderer genesis block..."
  exit 1
fi

# generate channel 1 configuration transaction
./bin/configtxgen -profile Channel1 -outputCreateChannelTx ./config/channel1.tx -channelID $CHANNEL_NAME1
if [ "$?" -ne 0 ]; then
  echo "Failed to generate channel configuration transaction..."
  exit 1
fi

# generate channel 2 configuration transaction
./bin/configtxgen -profile Channel2 -outputCreateChannelTx ./config/channel2.tx -channelID $CHANNEL_NAME2
if [ "$?" -ne 0 ]; then
  echo "Failed to generate channel configuration transaction..."
  exit 1
fi

# generate anchor peer transaction
./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/Sales1Organchors.tx -channelID $CHANNEL_NAME1 -asOrg Sales1Org
if [ "$?" -ne 0 ]; then
  echo "Failed to generate anchor peer update for Sales1Org... Channel1"
  exit 1
fi

# generate anchor peer transaction
./bin/configtxgen -profile Channel2 -outputAnchorPeersUpdate ./config/Sales2Organchors.tx -channelID $CHANNEL_NAME2 -asOrg Sales2Org
if [ "$?" -ne 0 ]; then
  echo "Failed to generate anchor peer update for Sales2Org... Channel2"
  exit 1
fi

# generate anchor peer transaction
./bin/configtxgen -profile Channel1 -outputAnchorPeersUpdate ./config/CustomerOrganchorsChannel1.tx -channelID $CHANNEL_NAME1 -asOrg CustomerOrg
if [ "$?" -ne 0 ]; then
  echo "Failed to generate anchor peer update for CustomerOrg... Channel1"
  exit 1
fi

# generate anchor peer transaction
./bin/configtxgen -profile Channel2 -outputAnchorPeersUpdate ./config/CustomerOrganchorsChannel2.tx -channelID $CHANNEL_NAME2 -asOrg CustomerOrg
if [ "$?" -ne 0 ]; then
  echo "Failed to generate anchor peer update for CustomerOrg... Channel2"
  exit 1
fi

================start.sh =========================
#!/bin/bash
set -ev

# don't rewrite paths for Windows Git Bash users
export MSYS_NO_PATHCONV=1

docker-compose -f docker-compose.yaml down
docker-compose -f docker-compose.yaml up -d

# wait for Hyperledger Fabric to start
# incase of errors when running later commands, issue export FABRIC_START_TIMEOUT=<larger number>
export FABRIC_START_TIMEOUT=300
#echo ${FABRIC_START_TIMEOUT}
sleep ${FABRIC_START_TIMEOUT}

# Create the channel1
docker exec cli1 peer channel create -o orderer1.acornpub.com:7050 -c channelsales1 -f /etc/hyperledger/configtx/channel1.tx

# Join peer0.sales1.acornpub.com to the channel and Update the Anchor Peers in Channel1
docker exec cli1 peer channel join -b channelsales1.block
docker exec cli1 peer channel update -o orderer1.acornpub.com:7050 -c channelsales1 -f /etc/hyperledger/configtx/Sales1Organchors.tx

# Join peer1.sales1.acornpub.com to the channel
docker exec -e "CORE_PEER_ADDRESS=peer1.sales1.acornpub.com:7051" cli1 peer channel join -b channelsales1.block

# Join peer0.customer.acornpub.com to the channel and update the Anchor Peers in Channel1
docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer0.customer.acornpub.com:7051" cli1 peer channel join -b channelsales1.block
docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer0.customer.acornpub.com:7051" cli1 peer channel update -o orderer1.acornpub.com:7050 -c channelsales1 -f /etc/hyperledger/configtx/CustomerOrganchorsChannel1.tx

# Join peer0.customer.acornpub.com to the channel
docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer1.customer.acornpub.com:7051" cli1 peer channel join -b channelsales1.block

# Create the channel2
docker exec cli2 peer channel create -o orderer1.acornpub.com:7050 -c channelsales2 -f /etc/hyperledger/configtx/channel2.tx

# Join peer0.sales2.acornpub.com to the channel and Update the Anchor Peers in Channel1
docker exec cli2 peer channel join -b channelsales2.block
docker exec cli2 peer channel update -o orderer1.acornpub.com:7050 -c channelsales2 -f /etc/hyperledger/configtx/Sales2Organchors.tx

# Join peer1.sales2.acornpub.com to the channel
docker exec -e "CORE_PEER_ADDRESS=peer1.sales2.acornpub.com:7051" cli2 peer channel join -b channelsales2.block

# Join peer0.customer.acornpub.com to the channel and update the Anchor Peers in Channel1
docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer0.customer.acornpub.com:7051" cli2 peer channel join -b channelsales2.block
docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer0.customer.acornpub.com:7051" cli2 peer channel update -o orderer1.acornpub.com:7050 -c channelsales2 -f /etc/hyperledger/configtx/CustomerOrganchorsChannel2.tx

# Join peer0.customer.acornpub.com to the channel
docker exec -e "CORE_PEER_LOCALMSPID=CustomerOrg" -e "CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/customer.acornpub.com/users/Admin@customer.acornpub.com/msp" -e "CORE_PEER_ADDRESS=peer1.customer.acornpub.com:7051" cli2 peer channel join -b channelsales2.block

============================= install-cc.sh
#!/bin/bash
set -ev

# install chaincode for channelsales1
#docker exec cli1 peer chaincode install -n music-cc-ch5 -v 1.0 -p chaincode/go
docker exec cli1 peer chaincode install -n music-cc-ch7 -v 1.0 -p chaincode/go
sleep 1
# instantiate chaincode for channelsales1
docker exec cli1 peer chaincode instantiate -o orderer1.acornpub.com:7050 -C channelsales1 -n music-cc-ch7 -v 1.0 -c '{"Args":[""]}' -P "OR ('Sales1Org.member','CustomerOrg.member')"
sleep 10
# invoke chaincode for channelsales1
docker exec cli1 peer chaincode invoke -o orderer1.acornpub.com:7050 -C channelsales1 -n music-cc-ch7 -c '{"function":"initWallet","Args":[""]}'
docker exec cli1 peer chaincode invoke -o orderer1.acornpub.com:7050 -C channelsales1 -n music-cc-ch7 -c '{"function":"setMusic","Args":["Fabric", "Hyper", "20", "1Q2W3E4R"]}'
sleep 3
# query chaincode for channelsales1
docker exec cli1 peer chaincode query -o orderer1.acornpub.com:7050 -C channelsales1 -n music-cc-ch7 -c '{"function":"getMusic","Args":["MS0"]}'

# install chaincode for channelsales2
docker exec cli2 peer chaincode install -n music-cc-ch8 -v 1.0 -p chaincode/go
#docker exec cli2 peer chaincode install -l java -n music-cc-ch6 -v 1.0 -p chaincode/Java
sleep 1
# install chaincode for channelsales2
docker exec cli2 peer chaincode instantiate -o orderer1.acornpub.com:7050 -C channelsales2 -n music-cc-ch8 -v 1.0 -c '{"Args":[""]}' -P "OR ('Sales2Org.member','CustomerOrg.member')"
sleep 3
# invoke chaincode for channelsales2
docker exec cli2 peer chaincode invoke -o orderer1.acornpub.com:7050 -C channelsales2 -n music-cc-ch8 -c '{"function":"initWallet","Args":[""]}'
docker exec cli2 peer chaincode invoke -o orderer1.acornpub.com:7050 -C channelsales2 -n music-cc-ch8 -c '{"function":"setMusic","Args":["Fabric", "Hyper", "10", "1Q2W3E4R"]}'
sleep 3
# query chaincode for channelsales2
docker exec cli2 peer chaincode query -o orderer1.acornpub.com:7050 -C channelsales2 -n music-cc-ch8 -c '{"function":"getMusic","Args":["MS0"]}'

ls $GOPATH/src/stream-music-2/basic-network/crypto-config/peerOrganizations/sales1.acornpub.com/ca/
==========================start-ca.sh ====================
#!/bin/bash
set -ev

docker-compose -f docker-compose-ca.yaml up -d ca.sales1.acornpub.com

sleep 1
cd $GOPATH/src/github.com/hyperledger-fabric-stream-music/stream-music-2/application/sdk
node enrollAdmin.js
sleep 1
node registUsers.js
cd ../server
node server.js
===================================teardown.sh =======================
#!/bin/bash
set -ev

# Shut down the Docker containers for the system tests.
docker-compose -f docker-compose-ca.yaml stop
docker-compose stop
docker-compose -f docker-compose-ca.yaml kill && docker-compose -f docker-compose-ca.yaml down --volumes --remove-orphans
docker-compose -f kill && docker-compose down --volumes --remove-orphans

# remove sdk wallet
rm -rf $GOPATH/src/stream-music-2/application/wallet/

# Your system is now clean
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)

# remove chaincode docker images
docker rmi -f $(docker images dev-* -q)